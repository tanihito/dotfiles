;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; environment setting

;; UTF-8 and Japanese Setting
(set-language-environment "Japanese")
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(setq file-name-coding-system 'utf-8)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; keybind

;; C-h BackSpace
(global-set-key "\C-h" 'delete-backward-char)

;; C-c c compile
(define-key mode-specific-map "c" 'compile)

;; M-g goto-line
(global-set-key "\M-g" 'goto-line)

;; C-c r query-replace
(global-set-key (kbd "C-c r") 'query-replace)

;; yes or no -> y or n
(fset 'yes-or-no-p 'y-or-n-p)

;; C-k kill-whole line
(setq kill-whole-line t)

;; C-o hippie-expand
(setq hippie-expand-try-functions-list
  '(try-complete-file-name-partially
    try-complete-file-name
    try-expand-all-abbrevs
    try-expand-dabbrev
    try-expand-dabbrev-all-buffers
    try-expand-dabbrev-from-kill
    try-complete-lisp-symbol-partially
    try-complete-lisp-symbol
   ))
(define-key global-map "\C-o" 'hippie-expand)

;; r change-to-wdired-mode
(add-hook 'dired-mode-hook
  (lambda ()(define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)))

;; C-x F show recent saved items
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-saved-items 500)
(global-set-key "\C-xF" 'recentf-open-files)

;; C-c o org-remember
(define-key mode-specific-map "o" 'org-remember)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; face

;; place scroll-bar to the right
(set-scroll-bar-mode 'right)

;; NO startup-message
(setq inhibit-startup-message t)

;; NO tool-bar
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))

;; NO menu-bar
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

;; No beep sound
(setq ring-bell-function 'ignore)

;; font-lock
(global-font-lock-mode t)

;; active-region-highlight
(setq transient-mark-mode t)

;; show paren
(show-paren-mode t)

;; show-space
; (defface my-face-b-1 '((t (:background "moccasin"))) nil)
; (defvar my-face-b-1 'my-face-b-1)
; (defadvice font-lock-mode (before my-font-lock-mode ())
;   (font-lock-add-keywords
;    major-mode
;    '(("ã€€" 0 my-face-b-1 append)
;      )))
; (ad-enable-advice 'font-lock-mode 'before 'my-font-lock-mode)
; (ad-activate 'font-lock-mode)

;; show line and column number
(line-number-mode 1)
(column-number-mode 1)

;; color-theme
(if window-system
    (progn
      (set-face-foreground 'default "white")
      (set-face-background 'default "#000000")
      (set-face-background 'fringe "#000000")
      (set-face-background 'region "gray30")))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; other settings

;; share clipboard
(setq x-select-enable-clipboard t)

;; eshell setting
(setq eshell-save-history-on-exit nil)

;; avoid "Symbolic link to SVN-controlled source file; follow link? (yes or no)"
(setq vc-follow-symlinks t)

;; auto insert
(setq  auto-insert-directory "~/.emacs.d/template/" )
(auto-insert-mode 1)
(setq auto-insert-query nil)
(add-to-list 'auto-insert-alist
             '("\\.py" . "python.tmpl"))
(add-to-list 'auto-insert-alist
             '("\\.pl" . "perl.tmpl"))
(add-to-list 'auto-insert-alist
             '("\\.pm" . "pm.tmpl"))

;; iswitchb
(iswitchb-mode 1)

;; recent files
(setq recentf-max-saved-items 500)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; install emacs-lisp files

(add-to-list 'load-path "~/.emacs.d/site-lisp")
(add-to-list 'load-path "~/.emacs.d/auto-install")

(defun load-safe (loadlib)
  (let ((load-status (load loadlib t)))
    (or load-status
        (message (format "[load-safe] failed %s" loadlib)))
    load-status))

;; autoinstall
; (install-elisp-from-emacswiki "auto-install.el")
(when (require 'auto-install nil t)
  (setq auto-install-directory "~/.emacs.d/auto-install/")
  (auto-install-update-emacswiki-package-name t)
  (auto-install-compatibility-setup)
  (setq ediff-window-setup-function 'ediff-setup-windows-plagin))

;; change movements of sequential command
; (install-elisp-from-emacswiki "sequential-command.el")
; (install-elisp-from-emacswiki "sequential-command-config.el")
(when (require 'sequential-command-config nil t)
  (sequential-command-setup-keys))

;; open junk file
; (install-elisp-from-emacswiki "open-junk-file.el")
(when (require 'open-junk-file nil t)
  (setq open-junk-file-format "~/junk/%Y-%m-%d-%H%M%S."))

;; javascript-mode
; (install-elisp "http://www.brgeight.se/downloads/emacs/javascript.el")
(when (load-safe "javascript")
  (add-to-list 'auto-mode-alist '("\\.js\\'" . javascript-mode))
  (autoload 'javascript-mode "javascript" nil t))

;; nxhtml-mode
; wget http://ourcomments.org/Emacs/DL/elisp/nxhtml/zip/nxhtml-2.08-100425.zip
; (nxhtml-update-existing-files)
; (nxhtmlmaint-start-byte-compilation)
(when (load-safe "nxhtml/autostart")
  (custom-set-faces
   '(mumamo-background-chunk-major ((((class color) (min-colors 88) (background dark)) (:background "black"))))
   '(mumamo-background-chunk-submode1 ((((class color) (min-colors 88) (background dark)) (:background "black"))))
   ))

;; tramp
(when (require 'tramp nil t)
  (setq tramp-default-method "sshx"))

;; uniquify buffer name
(when (require 'uniquify nil t)
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
  (setq uniquify-ignore-buffers-re "*[^*]+*"))

;; org-mode
(when (require 'org nil t)
  (org-remember-insinuate)
  (setq org-directory "~/memo")
  (setq org-default-notes-file (expand-file-name "memo.org" org-directory))
  (setq org-remember-templates
    '(("Note" ?n "** %?\n   %i\n   %a\n   %t" nil "Inbox")
      ("Todo" ?t "** TODO %?\n   %i\n   %a\n   %t" nil "Inbox"))))

;; redo+.el
; (install-elisp-from-emacswiki "redo+.el")
(when (require 'redo+ nil t)
  (global-set-key (kbd "C-M-/") 'redo)
  (setq undo-no-redo t)
  (setq undo-limit 600000)
  (setq undo-strong-limit 900000))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; load user configuration file
(if (file-readable-p "~/.emacs.mine.el")
    (load-file "~/.emacs.mine.el"))
